{
	"if": {
		"prefix": "if",
		"body": "if ${0:condition} then\n\t${1:-- body}\nend",
		"description": "if",
		"scope": "source.lua"
	},
	"ifelse": {
		"prefix": "if",
		"body": "if ${0:condition} then\n\t${1:-- body}\nelse\n\t${2:-- body}\nend",
		"description": "ifelse",
		"scope": "source.lua"
	},
	"elseif": {
		"prefix": "elseif",
		"body": "elseif ${0:condition} then",
		"description": "elseif",
		"scope": "source.lua"
	},
	"fori": {
		"prefix": "for",
		"body": "for ${0:i},${1:v} in ipairs(${2:table_name}) do\n\t${3:-- body}\nend",
		"description": "for i,v in ipairs()",
		"scope": "source.lua"
	},
	"for": {
		"prefix": "for",
		"body": "for ${0:i}=${1:1},${2:10} do\n\t${3:-- body}\nend",
		"description": "for i=1,10",
		"scope": "source.lua"
	},
	"forp": {
		"prefix": "for",
		"body": "for ${0:k},${1:v} in pairs(${2:table_name}) do\n\t${3:-- body}\nend",
		"description": "for k,v in pairs()",
		"scope": "source.lua"
	},
	"fun": {
		"prefix": "fun",
		"body": "function ${0:function_name}( ${1:...} )\n\t${2:-- body}\nend",
		"description": "function",
		"scope": "source.lua"
	},
	"function": {
		"prefix": "function",
		"body": "function ${0:function_name}( ${1:...} )\n\t${2:-- body}\nend",
		"description": "function",
		"scope": "source.lua"
	},
	"local": {
		"prefix": "local",
		"body": "local ${0:x} = ${1:1}",
		"description": "local x = 1",
		"scope": "source.lua"
	},
	"ret": {
		"prefix": "ret",
		"body": "return ${0:...}",
		"description": "return ...",
		"scope": "source.lua"
	},
	"req": {
		"prefix": "req",
		"body": "require(\"${0:module}\")",
		"description": "require()",
		"scope": "source.lua"
	},
	"require": {
		"prefix": "require",
		"body": "require(\"${0:module}\")",
		"description": "require()",
		"scope": "source.lua"
	},
	"ver": {
		"prefix": "ver",
		"body": "_VERSION",
		"description": "_VERSION",
		"scope": "source.lua"
	},	
	"version": {
		"prefix": "version",
		"body": "_VERSION",
		"description": "_VERSION",
		"scope": "source.lua"
	},	
	"assert": {
		"prefix": "assert",
		"body": "assert(${0:v}${1:[, message]})",
		"description": "assert()",
		"scope": "source.lua"
	},
	"collectgarbage": {
		"prefix": "collectgarbage",
		"body": "collectgarbage(${0:[opt]}${1:[, arg]})",
		"description": "collectgarbage()",
		"scope": "source.lua"
	},
	"dofile": {
		"prefix": "dofile",
		"body": "dofile(${0:[filename]})",
		"description": "dofile ([filename])",
		"scope": "source.lua"
	},
	"getmetatable": {
		"prefix": "getmetatable",
		"body": "getmetatable(${0:object})",
		"description": "getmetatable (object)",
		"scope": "source.lua"
	},
	"next": {
		"prefix": "next",
		"body": "next(${0:table}${1:[, index]})",
		"description": "next (table [, index])",
		"scope": "source.lua"
	},
	"print": {
		"prefix": "print",
		"body": "print(${0:...})",
		"description": "print(...)",
		"scope": "source.lua"
	},
	"select": {
		"prefix": "select",
		"body": "select(${0:index}, ${1:...})",
		"description": "select (index, ···)",
		"scope": "source.lua"
	},
	"setmetatable": {
		"prefix": "setmetatable",
		"body": "setmetatable(${0:table}, ${1:metatable})",
		"description": "setmetatable (table, metatable)",
		"scope": "source.lua"
	},
	"tonumber": {
		"prefix": "tonumber",
		"body": "tonumber(${0:e}${1:[, base]})",
		"description": "tonumber (e [, base])",
		"scope": "source.lua"
	},
	"tostring": {
		"prefix": "tostring",
		"body": "tostring(${0:v})",
		"description": "tostring (v)",
		"scope": "source.lua"
	},
	"type": {
		"prefix": "type",
		"body": "type(${0:v})",
		"description": "type (v)",
		"scope": "source.lua"
	},
	
	"table.concat": {
		"prefix": "table.concat",
		"body": "table.concat( ${0:tablename}${1:, \", \"}${2:, start_index}${3:, end_index} )",
		"description": "table.concat",
		"scope": "source.lua"
	},
	"table.insert": {
		"prefix": "table.insert",
		"body": "table.insert( ${0:list},${1: [pos,]}${2: value} )",
		"description": "table.insert",
		"scope": "source.lua"
	},
	"table.remove": {
		"prefix": "table.remove",
		"body": "table.remove( ${0:list},${1: [pos,]} )",
		"description": "table.remove",
		"scope": "source.lua"
	},
	"table.sort": {
		"prefix": "table.sort",
		"body": "table.sort( ${0:tablename}${1:, sortfunction} )",
		"description": "table.sort",
		"scope": "source.lua"
	},
	
	"string.byte": {
		"prefix": "string.byte",
		"body": "string.byte( ${0:s}${1:[, i]}${2:[, j]} )",
		"description": "string.byte",
		"scope": "source.lua"
	},
	"string.char": {
		"prefix": "string.char",
		"body": "string.char( ${0:...} )",
		"description": "string.char",
		"scope": "source.lua"
	},
	"string.find": {
		"prefix": "string.find",
		"body": "string.find( ${0:s},${1:pattern}${2:[, init]}${3:[, plain]} )",
		"description": "string.find",
		"scope": "source.lua"
	},
	"string.format": {
		"prefix": "string.format",
		"body": "string.format( \"${0:formatstring}\",${1:...} )",
		"description": "string.format",
		"scope": "source.lua"
	},	
	"string.gmatch": {
		"prefix": "string.gmatch",
		"body": "string.gmatch( ${0:s},${1:pattern} )",
		"description": "string.gmatch",
		"scope": "source.lua"
	},	
	"string.gsub": {
		"prefix": "string.gsub",
		"body": "string.gsub( ${0:s},${1:pattern},${2:repl}${3:[, n]} )",
		"description": "string.gsub",
		"scope": "source.lua"
	},
	"string.sub": {
		"prefix": "string.sub",
		"body": "string.sub( ${0:s}, ${1:i}${2:[, j]} )",
		"description": "string.sub",
		"scope": "source.lua"
	},
	"string.len": {
		"prefix": "string.len",
		"body": "string.len( ${0:s} )",
		"description": "string.len",
		"scope": "source.lua"
	},
	"string.lower": {
		"prefix": "string.lower",
		"body": "string.lower( ${0:s} )",
		"description": "string.lower",
		"scope": "source.lua"
	},
	"string.match": {
		"prefix": "string.match",
		"body": "string.match( ${0:s},${1:pattern}${2:[, init]} )",
		"description": "string.match",
		"scope": "source.lua"
	},
	"string.upper": {
		"prefix": "string.upper",
		"body": "string.upper( ${0:s} )",
		"description": "string.upper",
		"scope": "source.lua"
	},
	"string.rep": {
		"prefix": "string.rep",
		"body": "string.rep( ${0:s}, ${1:n}${2:[, rep]} )",
		"description": "string.rep",
		"scope": "source.lua"
	},
	"string.reverse": {
		"prefix": "string.reverse",
		"body": "string.reverse( ${0:s} )",
		"description": "string.reverse",
		"scope": "source.lua"
	},
	
	"math.abs": {
		"prefix": "math.abs",
		"body": "math.abs( ${0:x} )",
		"description": "math.abs",
		"scope": "source.lua"
	},
	"math.acos": {
		"prefix": "math.acos",
		"body": "math.acos( ${0:x} )",
		"description": "math.acos",
		"scope": "source.lua"
	},
	"math.asin": {
		"prefix": "math.asin",
		"body": "math.asin( ${0:x} )",
		"description": "math.asin",
		"scope": "source.lua"
	},
	"math.ceil": {
		"prefix": "math.ceil",
		"body": "math.ceil( ${0:x} )",
		"description": "math.ceil",
		"scope": "source.lua"
	},
	"math.cos": {
		"prefix": "math.cos",
		"body": "math.cos( ${0:x} )",
		"description": "math.cos",
		"scope": "source.lua"
	},
	"math.deg": {
		"prefix": "math.deg",
		"body": "math.deg( ${0:x} )",
		"description": "math.deg",
		"scope": "source.lua"
	},
	"math.exp": {
		"prefix": "math.exp",
		"body": "math.exp( ${0:x} )",
		"description": "math.exp",
		"scope": "source.lua"
	},
	"math.floor": {
		"prefix": "math.floor",
		"body": "math.floor( ${0:x} )",
		"description": "math.floor",
		"scope": "source.lua"
	},
	"math.modf": {
		"prefix": "math.modf",
		"body": "math.modf( ${0:x} )",
		"description": "math.modf",
		"scope": "source.lua"
	},
	"math.math.randomseed": {
		"prefix": "math.math.randomseed",
		"body": "math.math.randomseed( ${0:x} )",
		"description": "math.math.randomseed",
		"scope": "source.lua"
	},
	"math.sin": {
		"prefix": "math.sin",
		"body": "math.sin( ${0:x} )",
		"description": "math.sin",
		"scope": "source.lua"
	},
	"math.sqrt": {
		"prefix": "math.sqrt",
		"body": "math.sqrt( ${0:x} )",
		"description": "math.sqrt",
		"scope": "source.lua"
	},
	"math.tan": {
		"prefix": "math.tan",
		"body": "math.tan( ${0:x} )",
		"description": "math.tan",
		"scope": "source.lua"
	},
	"math.tointeger": {
		"prefix": "math.tointeger",
		"body": "math.tointeger( ${0:x} )",
		"description": "math.tointeger",
		"scope": "source.lua"
	},
	"math.type": {
		"prefix": "math.type",
		"body": "math.type( ${0:x} )",
		"description": "math.type",
		"scope": "source.lua"
	},
	"math.random": {
		"prefix": "math.random",
		"body": "math.random( ${0:[m]}${1:[, n]} )",
		"description": "math.random",
		"scope": "source.lua"
	},
	"math.log": {
		"prefix": "math.log",
		"body": "math.log( ${0:x}${1:[, base]} )",
		"description": "math.log",
		"scope": "source.lua"
	},
	"math.max": {
		"prefix": "math.max",
		"body": "math.max( ${0:x},${1:...} )",
		"description": "math.max",
		"scope": "source.lua"
	},
	"math.min": {
		"prefix": "math.min",
		"body": "math.min( ${0:x},${1:...} )",
		"description": "math.min",
		"scope": "source.lua"
	},
	"math.fmod": {
		"prefix": "math.fmod",
		"body": "math.fmod( ${0:x},${1:y} )",
		"description": "math.fmod",
		"scope": "source.lua"
	},	
	"math.atan": {
		"prefix": "math.atan",
		"body": "math.atan( ${0:y}${1:[, x]} )",
		"description": "math.atan",
		"scope": "source.lua"
	},	
	
	"coroutine.create": {
		"prefix": "coroutine.create",
		"body": "coroutine.create( ${0:function} )",
		"description": "coroutine.create",
		"scope": "source.lua"
	},	
	"coroutine.isyieldable": {
		"prefix": "coroutine.isyieldable",
		"body": "coroutine.isyieldable( )",
		"description": "coroutine.isyieldable",
		"scope": "source.lua"
	},
	"coroutine.resume": {
		"prefix": "coroutine.resume",
		"body": "coroutine.resume( ${0:co}${1:[, val1, ···]} )",
		"description": "coroutine.resume",
		"scope": "source.lua"
	},	
	"coroutine.running": {
		"prefix": "coroutine.running",
		"body": "coroutine.running( )",
		"description": "coroutine.running",
		"scope": "source.lua"
	},
	"coroutine.status": {
		"prefix": "coroutine.status",
		"body": "coroutine.status( ${0:co} )",
		"description": "coroutine.status",
		"scope": "source.lua"
	},	
	"coroutine.wrap": {
		"prefix": "coroutine.wrap",
		"body": "coroutine.wrap( ${0:function} )",
		"description": "coroutine.wrap",
		"scope": "source.lua"
	},
	"coroutine.yield": {
		"prefix": "coroutine.yield",
		"body": "coroutine.yield( ${0:...} )",
		"description": "coroutine.yield",
		"scope": "source.lua"
	},
	
	"debug.debug": {
		"prefix": "debug.debug",
		"body": "debug.debug()",
		"description": "debug.debug ()",
		"scope": "source.lua"
	},
	"debug.gethook": {
		"prefix": "debug.gethook",
		"body": "debug.gethook( ${0:[thread]} )",
		"description": "debug.gethook ([thread])",
		"scope": "source.lua"
	},
	"debug.getlocal": {
		"prefix": "debug.getlocal",
		"body": "debug.getlocal( ${0:[thread],}${1:f}${2:[, local]} )",
		"description": "debug.getlocal ([thread,] f, local)",
		"scope": "source.lua"
	},
	"debug.getinfo": {
		"prefix": "debug.getinfo",
		"body": "debug.getinfo( ${0:[thread],}${1:f}${2:[, what]} )",
		"description": "debug.getinfo ([thread,] f [, what])",
		"scope": "source.lua"
	},
	"debug.getmetatable": {
		"prefix": "debug.getmetatable",
		"body": "debug.getmetatable( ${0:value} )",
		"description": "debug.getmetatable (value)",
		"scope": "source.lua"
	},
	"debug.getregistry": {
		"prefix": "debug.getregistry",
		"body": "debug.getregistry()",
		"description": "debug.getregistry ()",
		"scope": "source.lua"
	},
	"debug.getupvalue": {
		"prefix": "debug.getupvalue",
		"body": "debug.getupvalue( ${0:f}, ${1:up} )",
		"description": "debug.getupvalue (f, up)",
		"scope": "source.lua"
	},
	"debug.getuservalue ": {
		"prefix": "debug.getuservalue ",
		"body": "debug.getuservalue ( ${0:u} )",
		"description": "debug.getuservalue (u)",
		"scope": "source.lua"
	},
	"debug.sethook": {
		"prefix": "debug.sethook",
		"body": "debug.sethook( ${0:[thead,]}${1:hook}, ${2:mask}${3:[, count]} )",
		"description": "debug.sethook ([thread,] hook, mask [, count])",
		"scope": "source.lua"
	},
	"debug.setlocal": {
		"prefix": "debug.setlocal",
		"body": "debug.setlocal( ${0:[thead,]}${1:level}, ${2:local}, ${3:value} )",
		"description": "debug.setlocal ([thread,] level, local, value)",
		"scope": "source.lua"
	},
	"debug.setmetatable": {
		"prefix": "debug.setmetatable",
		"body": "debug.setmetatable( ${0:value}, ${1:table} )",
		"description": "debug.setmetatable (value, table)",
		"scope": "source.lua"
	},
	"debug.setupvalue": {
		"prefix": "debug.setupvalue",
		"body": "debug.setupvalue( ${0:f}, ${1:up}, ${2:value} )",
		"description": "debug.setupvalue (f, up, value)",
		"scope": "source.lua"
	},
	"debug.setuservalue": {
		"prefix": "debug.setuservalue",
		"body": "debug.setuservalue( ${0:udata}, ${1:value} )",
		"description": "debug.setuservalue (udata, value)",
		"scope": "source.lua"
	},
	"debug.traceback": {
		"prefix": "debug.traceback",
		"body": "debug.traceback( ${0:[thread,]}${1:[message]}${2:[, level]} )",
		"description": "debug.traceback ([thread,] [message [, level]])",
		"scope": "source.lua"
	},
	"debug.upvalueid": {
		"prefix": "debug.upvalueid",
		"body": "debug.upvalueid( ${0:f}, ${1:n})",
		"description": "debug.upvalueid (f, n)",
		"scope": "source.lua"
	},
	"debug.upvaluejoin": {
		"prefix": "debug.upvaluejoin",
		"body": "debug.upvaluejoin( ${0:f1}, ${1:n1}, ${2:f2}, ${3:n2} )",
		"description": "debug.upvaluejoin (f1, n1, f2, n2)",
		"scope": "source.lua"
	}
	
}